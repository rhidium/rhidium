generator client {
  provider = "prisma-client-js"
  // Note: You will need to declare a binary target for the Prisma Client when you
  // deploy to Docker, Vercel, AWS Lambda, Google Cloud Functions, Azure Functions, etc.
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @unique                                    // The Discord id of the user
  Members Member[]                                                // A user can be a member of multiple guilds
}

model Member {                                                    // Note: Structure reflects the Discord API
  id  String @id @unique                                          // The id of the Discord user
  User    User   @relation(fields: [id], references: [id])        // The Discord user for the guild member
  GuildId String                                                  // The id of the guild this member belongs to
  Guild   Guild  @relation(fields: [GuildId], references: [id])   // A member belongs to a single guild
}

model Guild {
  id      String   @id @unique                                    // The Discord id of the guild (server)
  Members Member[]                                                // A guild can have multiple members

  // Role configuration
  autoRoleIds       String[]                                      // List of role ids that are automatically assigned to new members
  adminRoleId       String?                                       // The id of the admin role
  adminLogChannelId String?                                       // The id of the admin log channel
  modRoleId         String?                                       // The id of the moderator role
  modLogChannelId   String?                                       // The id of the mod log channel

  // Embed configuration for the guildMemberAdd event
  memberJoinChannelId String?
  MemberJoinEmbed     Embed?  @relation("MemberJoinEmbed", fields: [MemberJoinEmbedId], references: [id])
  MemberJoinEmbedId   Int?

  // Embed configuration for the guildMemberRemove event
  memberLeaveChannelId String?
  MemberLeaveEmbed     Embed?  @relation("MemberLeaveEmbed", fields: [MemberLeaveEmbedId], references: [id])
  MemberLeaveEmbedId   Int?
}

model CommandCooldown {
  id         Int        @id @default(autoincrement())
  cooldownId String     @unique
  duration   Int
  usages     DateTime[]
}

model CommandStatistics {
  id        Int    @id @unique @default(autoincrement())
  type      Int
  commandId String @unique

  // Track usage information
  usages      DateTime[] @default([])
  lastUsedAt  DateTime?
  firstUsedAt DateTime?

  // Track error information
  errorCount  Int       @default(0)
  lastError   String?
  lastErrorAt DateTime?

  // Track runtime information
  runtimeCount        Int
  runtimeTotal        Float?
  runtimeMax          Float?
  runtimeMin          Float?
  runtimeMean         Float?
  runtimeMedian       Float?
  runtimeVariance     Float?
  runtimeStdDeviation Float?
}

model Embed {
  id            Int          @id @default(autoincrement())
  messageText   String?
  color         Int?
  authorName    String?
  authorIconURL String?
  authorURL     String?
  title         String?
  description   String?
  url           String?
  imageURL      String?
  thumbnailURL  String?
  footerText    String?
  footerIconURL String?
  fields        EmbedField[]

  // Embeds can be user-customized through relations
  MemberJoinEmbed  Guild[] @relation("MemberJoinEmbed")
  MemberLeaveEmbed Guild[] @relation("MemberLeaveEmbed")
}

model EmbedField {
  id      Int     @id @unique @default(autoincrement())
  Embed   Embed?  @relation(fields: [EmbedId], references: [id])
  EmbedId Int?

  name    String
  value   String
  inline  Boolean
}
