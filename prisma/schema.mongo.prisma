generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

// [DEV] This file is currently NOT up-to-date with the latest changes in the schema.prisma file.
// [DEV] This file is currently NOT up-to-date with the latest changes in the schema.prisma file.
// [DEV] This file is currently NOT up-to-date with the latest changes in the schema.prisma file.

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @map("_id") @db.ObjectId
  Members Member[]
}

model Member {
  id      String @id @map("_id") @db.ObjectId
  User    User   @relation(fields: [id], references: [id])
  GuildId String @db.ObjectId
  Guild   Guild  @relation(fields: [GuildId], references: [id])
}

model Guild {
  id      String @id @map("_id") @db.ObjectId
  Members   Member[]

  autoRoleIds String[]
  adminRoleId       String?
  adminLogChannelId String?
  modRoleId         String?
  modLogChannelId   String?

  memberJoinChannelId String?
  MemberJoinEmbed     Embed?  @relation("MemberJoinEmbed", fields: [MemberJoinEmbedId], references: [id])
  MemberJoinEmbedId   String? @db.ObjectId

  memberLeaveChannelId String?
  MemberLeaveEmbed     Embed?  @relation("MemberLeaveEmbed", fields: [MemberLeaveEmbedId], references: [id])
  MemberLeaveEmbedId   String? @db.ObjectId
}

model CommandCooldown {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  cooldownId String     @unique
  duration   Int
  usages     DateTime[]
}

model CommandStatistics {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  type      Int
  commandId String @unique

  usages      DateTime[] @default([])
  lastUsedAt  DateTime?
  firstUsedAt DateTime?

  errorCount  Int       @default(0)
  lastError   String?
  lastErrorAt DateTime?

  runtimeTotal        Float?
  runtimeMax          Float?
  runtimeMin          Float?
  runtimeMean         Float?
  runtimeMedian       Float?
  runtimeVariance     Float?
  runtimeStdDeviation Float?
}

model Embed {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  messageText   String?
  color         Int?
  authorName    String?
  authorIconURL String?
  authorURL     String?
  title         String?
  description   String?
  url           String?
  imageURL      String?
  thumbnailURL  String?
  footerText    String?
  footerIconURL String?
  fields        EmbedField[]

  MemberJoinEmbed  Guild[] @relation("MemberJoinEmbed")
  MemberLeaveEmbed Guild[] @relation("MemberLeaveEmbed")
}

model EmbedField {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  Embed   Embed?  @relation(fields: [EmbedId], references: [id])
  EmbedId String? @db.ObjectId

  name    String
  value   String
  inline  Boolean
}
